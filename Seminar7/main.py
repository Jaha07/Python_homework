# Задача №47. Решение в группах
# У вас есть код, который вы не можете менять 
# (так часто бывает, когда код в глубине программы используется множество раз и вы не хотите ничего сломать): 
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, 
# а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.

# Ввод: values = [1, 23, 42, ‘asdfg’] 
# transformed_values = list(map(trasformation, values)) 
# if values == transformed_values:    
#     print(‘ok’) 
# else:    
#     print(‘fail’)
# Вывод: ok

# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(lambda x: x, values))
# print(transormed_values == values)



# Задача №49. Решение в группах Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
# Напишите функцию ﬁnd_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, 
# по которой вращается самая далекая планета. Круговые орбиты не учитывайте: 
# вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. 
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. 
# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. 
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. 
# При решении задачи используйте списочные выражения. Подсказка: проще всего будет найти эллипс в два шага: 
# сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую  площадь. 
# Гарантируется, что самая далекая планета ровно одна
# Ввод: orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] 
#       print(*ﬁnd_farthest_orbit(orbits))
# Вывод: 2.5 10

# def findFarthestOrbit(listOfOrbits):
#     return max([orbit for orbit in listOfOrbits if orbit[0] != orbit[1]], key=lambda x: x[0] * x[1])
# listOfOrbits = [(1, 3),(2.5, 10),(7, 2),(6, 6),(4, 3)]
# print(findFarthestOrbit(listOfOrbits))


# another option
# def find_fartherst_orbit(orbits):
#     s = [(dbl[0]*dbl[1] if dbl[0] != dbl[1] else 0) for dbl in orbits]
#     return orbits[s.index(max(s))]
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(find_fartherst_orbit(orbits))



# Задача №51. Решение в группах 
# Напишите функцию same_by(characteristic, objects), 
# которая проверяет, все ли объекты имеют одинаковое значение некоторой характеристики, 
# и возвращают True, если это так. Если значение характеристики для разных объектов отличается - то False. 
# Для пустого набора объектов, функция должна возвращать True. 
# Аргумент characteristic - это функция, которая принимает объект и вычисляет его характеристику. 
# Ввод: 
# values = [0, 2, 10, 6] 
# if same_by(lambda x: x % 2, values): 
#         print(‘same’) 
#     else: print(‘different’)   
# Вывод: same

# def same_by(func, vals):
#     return len(set(map(func, vals))) in [0, 1]

# values = [0, 2, 10, 7] 
# if same_by(lambda x: x % 2, values): 
#     print('same') 
# else: 
#     print('different')


# HOMEWORK HOMEWORK HOMEWORK

# Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, 
# Вам стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов 
# (т.е. число гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова,
# если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг от друга пробелами. 
# Стихотворение  Винни-Пух вбивает в программу с клавиатуры. В ответе напишите “Парам пам-пам”, 
# если с ритмом все в порядке и “Пам парам”, если с ритмом все не в порядке

# Ввод:   
# пара-ра-рам рам-пам-папам па-ра-па-дам
# Вывод:
# Парам пам-пам

# lines = 'пара-ра-рам рам-пам-папам па-ра-па-дам'
# lst = [sum(x in 'a' for x in lin) for lin in lines]
# if len(set(lst)) == 1:
#     res = 'Парам пам-пам'
# else:
#     res = 'Пам парам'
# print(res)



# Задача 36:  Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), 
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца. 
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны. 
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля). 
# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, у операции умножения.

# Ввод: 
# print_operation_table(lambda x, y: x * y)  

# 1     2      3      4     5     6
# 2     4      6      8    10    12
# 3     6      9     12    15    18   
# 4     8     12     16    20    24     
# 5    10     15     20    25    30     
# 6    12     18     24    30    36  

# def print_operation_table(operation, num_rows = 6, num_columns = 6):
#     a = [[operation(i, j) for j in range(1, num_columns + 1)] for i in range(1, num_rows + 1)]
#     for i in a:
#         print(*[f"{x:>3}" for x in i])
# print_operation_table(lambda x, y: x * y)





                
